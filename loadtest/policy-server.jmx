<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Policy Server" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">500</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <longProp name="ThreadGroup.start_time">1512835733000</longProp>
        <longProp name="ThreadGroup.end_time">1512835733000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="policy-server request" enabled="true">
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.jmeter.util.JsseSSLManager;
import org.apache.jmeter.util.SSLManager;

import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;

def your_app_port = 8080
def your_app_host = &quot;localhost&quot;
def sslManager = (JsseSSLManager) SSLManager.getInstance()
def sslsocketfactory = sslManager.getContext().getSocketFactory()
def socket = (SSLSocket) sslsocketfactory.createSocket(your_app_host, your_app_port)

def os = socket.getOutputStream()
def request = &quot;&lt;policy-file-request/&gt;\0&quot;.getBytes()
os.write(request, 0, request.length)
os.flush()

def is = socket.getInputStream()
def bytes = new byte[224]
is.read(bytes, 0, 224)
def response = new String(bytes, &quot;UTF-8&quot;);
def expectedResponse = &apos;&apos;&apos;&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE cross-domain-policy SYSTEM &quot;http://www.adobe.com/xml/dtds/cross-domain-policy.dtd&quot;&gt;
&lt;cross-domain-policy&gt;
  &lt;allow-access-from domain=&quot;*.example.com&quot; to-ports=&quot;443&quot;/&gt;
&lt;/cross-domain-policy&gt;
\0&apos;&apos;&apos;

assert expectedResponse == response

socket.close();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree>
      <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="policy-server request" enabled="true">
        <stringProp name="cacheKey"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">import org.apache.jmeter.util.JsseSSLManager;
import org.apache.jmeter.util.SSLManager;

import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;

def your_app_port = 8080
def your_app_host = &quot;localhost&quot;
def sslManager = (JsseSSLManager) SSLManager.getInstance()
def sslsocketfactory = sslManager.getContext().getSocketFactory()
def socket = (SSLSocket) sslsocketfactory.createSocket(your_app_host, your_app_port)

def os = socket.getOutputStream()
def request = &quot;&lt;policy-file-request/&gt;\0&quot;.getBytes()
os.write(request, 0, request.length)
os.flush()

def is = socket.getInputStream()
def bytes = new byte[224]
is.read(bytes, 0, 224)
def response = new String(bytes, &quot;UTF-8&quot;);
def expectedResponse = &apos;&apos;&apos;&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE cross-domain-policy SYSTEM &quot;http://www.adobe.com/xml/dtds/cross-domain-policy.dtd&quot;&gt;
&lt;cross-domain-policy&gt;
  &lt;allow-access-from domain=&quot;*.example.com&quot; to-ports=&quot;443&quot;/&gt;
&lt;/cross-domain-policy&gt;
\0&apos;&apos;&apos;

assert expectedResponse == response

socket.close();</stringProp>
        <stringProp name="scriptLanguage">groovy</stringProp>
      </JSR223Sampler>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
